"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fork_ts_checker_webpack_plugin_1 = __importDefault(require("fork-ts-checker-webpack-plugin"));
var gatsby_node_1 = require("gatsby-plugin-graphql-codegen/gatsby-node");
var require_resolve_1 = __importDefault(require("./require-resolve"));
var defaultOptions = {
    plugins: [],
    tsLoader: {},
    typeCheck: true,
    alwaysCheck: false,
    forkTsCheckerPlugin: {
        async: false,
        silent: true,
        formatter: 'codeframe',
    },
};
var getOptions = function (pluginOptions) { return (__assign(__assign(__assign({}, defaultOptions), pluginOptions), { forkTsCheckerPlugin: __assign(__assign({}, defaultOptions.forkTsCheckerPlugin), pluginOptions.forkTsCheckerPlugin) })); };
var createRule = function (jsLoader, _a) {
    var tsLoader = _a.tsLoader;
    return ({
        test: /\.tsx?$/,
        exclude: /node_modules/,
        use: [
            jsLoader,
            {
                loader: require_resolve_1.default('ts-loader'),
                options: __assign(__assign({}, tsLoader), { 
                    // use ForkTsCheckerWebpackPlugin for typecheck
                    transpileOnly: true }),
            },
        ],
    });
};
exports.resolvableExtensions = function () { return [
    '.ts',
    '.tsx',
]; };
exports.onCreateWebpackConfig = function (_a, pluginOptions) {
    var loaders = _a.loaders, actions = _a.actions;
    if (pluginOptions === void 0) { pluginOptions = { plugins: [] }; }
    var options = getOptions(pluginOptions);
    var typeCheck = options.typeCheck, forkTsCheckerPlugin = options.forkTsCheckerPlugin;
    var jsLoader = loaders.js();
    if (!jsLoader)
        return;
    var tsRule = createRule(jsLoader, options);
    var plugins = [];
    if (typeCheck) {
        plugins.push(new fork_ts_checker_webpack_plugin_1.default(forkTsCheckerPlugin));
    }
    var config = {
        module: {
            rules: [tsRule],
        },
        plugins: plugins,
    };
    actions.setWebpackConfig(config);
};
exports.onPostBootstrap = gatsby_node_1.onPostBootstrap;
exports.onPreInit = function (_a, options) {
    var reporter = _a.reporter;
    if (options === void 0) { options = { plugins: [] }; }
    var alwaysCheck = options.alwaysCheck;
    var typeCheck = getOptions(options).typeCheck;
    if (typeof alwaysCheck !== 'undefined') {
        reporter.warn("[gatsby-plugin-ts] `alwaysCheck` has been deprecated. Please set `typeCheck` instead.");
    }
    reporter.info("[gatsby-plugin-ts] Typecheck is " + (typeCheck ? 'enabled' : 'disabled') + ".");
};
