"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
exports.filterFonts = function (options) {
    var errors = [];
    var accepted = [];
    var fonts = options.fonts;
    var _loop_1 = function (font) {
        var family = font.family, variable = font.variable, weights = font.weights;
        if (!variable) {
            if (weights) {
                var validWeights = weights.filter(function (weight) {
                    if (constants_1.FIXED_WEIGHTS.includes(weight)) {
                        return true;
                    }
                    else {
                        errors.push({
                            family: family,
                            weight: weight,
                            reason: constants_1.ERRORS.NOT_VALID_WEIGHT
                        });
                    }
                });
                accepted.push(__assign(__assign({}, font), { weights: validWeights }));
            }
            else {
                accepted.push(__assign({}, font));
            }
        }
        else {
            // if variable and len > 2
            if (weights) {
                if (weights.length > 2) {
                    errors.push({
                        family: family,
                        reason: constants_1.ERRORS.TOO_MANY_WEIGHTS
                    });
                    return "continue";
                }
                var validWeights = weights.filter(function (weight) {
                    if (weight && weight.match(constants_1.VARIABLE_WEIGHT_REGEX)) {
                        return true;
                    }
                    else {
                        errors.push({
                            family: family,
                            weight: weight,
                            reason: constants_1.ERRORS.NOT_VALID_VARIABLE_WEIGHT_FORMAT
                        });
                        return false;
                    }
                });
                accepted.push(__assign(__assign({}, font), { weights: validWeights }));
            }
        }
    };
    for (var _i = 0, fonts_1 = fonts; _i < fonts_1.length; _i++) {
        var font = fonts_1[_i];
        _loop_1(font);
    }
    return {
        accepted: accepted,
        errors: errors
    };
};
exports.checkNoLegacyVariableConflict = function (options) {
    var legacy = options.legacy, fonts = options.fonts;
    if (!legacy) {
        return true;
    }
    else {
        for (var _i = 0, fonts_2 = fonts; _i < fonts_2.length; _i++) {
            var font = fonts_2[_i];
            if (font.variable) {
                return false;
            }
        }
    }
};
exports.formatFontName = function (font) {
    var family = font.family, strictName = font.strictName;
    if (strictName) {
        return family;
    }
    return family
        .split(' ')
        .map(function (token) {
        return token.replace(/^\w/, function (s) {
            return s.toUpperCase();
        });
    })
        .join(' ')
        .replace(/ /g, '+');
};
exports.getFontWeight = function (font) {
    var variable = font.variable, weights = font.weights;
    if (weights) {
        if (variable) {
            var boldWeight = weights[0], italWeight = weights[1];
            return (italWeight ? 'ital,' : '') + "wght@" + (boldWeight ? "" + (italWeight ? '0,' : '') + boldWeight : '') + (boldWeight && italWeight ? ';' : '') + (italWeight ? "1," + italWeight : '');
        }
        else {
            return "wght@" + weights.join(';');
        }
    }
    return '';
};
exports.assembleFontsLink = function (fonts) {
    return fonts
        .map(function (font) {
        var family = exports.formatFontName(font);
        var weights = exports.getFontWeight(font);
        return "family=" + family + (weights ? ":" + weights : '');
    })
        .join('&');
};
exports.setDisplay = function (options) {
    return options.display ? "&display=" + options.display : '&display=swap';
};
//# sourceMappingURL=functions.js.map